#!/bin/bash

DIR=`dirname $0`
VLPHOME="$(cd $DIR; cd ..; pwd)"
. $VLPHOME/vlp.env
VLPCFG="$VLPHOME/.vpn-launchpad"
REGION=`aws --profile $PROFILE configure get region`
VLPKEY="$VLPCFG/$STACKID.$REGION.$PROFILE.pem"

aws --profile $PROFILE ec2 describe-instances >/dev/null
if [ "$?" != "0" ]; then
	echo "Please run 'vlp init' first."
	exit 255
fi

echo "Checking existing VPN server instance..."
VPSIP=`$VLPHOME/bin/vlp-status 2>/dev/null|grep VPN-SERVER|awk '{print $2}'`
if [ "$VPSIP" != "None" ]; then
	echo "Found VPN-SERVER: $VPSIP"
	echo "Please purge it before building"
	echo "Abort."
	echo
	exit 254
fi
echo "VPN-SERVER: None"
echo "Done."
echo

DEPLOY=0
while [[ $# > 0 ]]; do
	case $1 in
		--from-src)
			SVROPT="--from-src"
			shift
			;;
		--with-brook)
			BROOK=true
			((DEPLOY++))
			shift
			;;
		--with-l2tp)
			L2TP=true
			((DEPLOY++))
			shift
			;;
		--with-sslibev)
			SSLIBEV=true
			((DEPLOY++))
			shift
			;;
		--with-trojan)
			TROJAN=true
			((DEPLOY++))
			shift
			;;
		--with-v2ray)
			V2RAY=true
			((DEPLOY++))
			shift
			;;
		*)
			shift
			;;
	esac
done

echo "Querying latest $UBUNTUVER image in region $REGION ..."
CANONICAL_OWNID="099720109477"
AMISELECT=`aws --profile $PROFILE --output text ec2 describe-images --filters "Name=owner-id,Values=$CANONICAL_OWNID" "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-$UBUNTUVER-*" --query "Images[*].[Architecture,CreationDate,ImageId,Name,Description]"|grep ^$INSTARCH|sort -k2 -r|head -n1`
echo "$AMISELECT"|awk '{print $3,$4}'
AMIID=`echo "$AMISELECT"|awk '{print $3}'`
if [ "$AMIID" = "" ]; then
	echo "$UBUNTUVER image not found."
	echo "Abort."
	exit 253
fi
echo "Done."
echo

echo "Creating Security Group of $STACKID..."
SGID=`aws --profile $PROFILE --output text ec2 create-security-group --group-name $STACKID-sg --description "Security group for $STACKID. Created by vpn-launchpad."`
echo "$STACKID-sg"
echo "Done."
echo

FIREWALL_ENABLE () {
	if [ "$1" = "" ] || [ "$2" = "" ] || [ "$3" = "" ]; then
		return 1
	fi
	for sgport in `echo $2|sed 's/:/\n/g'`;
	do
		echo "aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol $1 --port $sgport --cidr $3"
		aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol $1 --port $sgport --cidr $3
	done
}

# Enable ssh Ingress
echo "Firewall rules ssh..."
FIREWALL_ENABLE "tcp" "22" "0.0.0.0/0"
echo "Done."
echo

echo "Creating Key-Pair of $STACKID..."
if [ ! -d "$VLPCFG" ]; then
	mkdir $VLPCFG
fi
aws --profile $PROFILE --output text ec2 create-key-pair --key-name $STACKID-key --query 'KeyMaterial'> $VLPKEY
chmod 600 $VLPKEY
echo "Saving private key: $VLPKEY"
echo "Done."
echo

echo "Creating instance of $STACKID..."
INSTID=`aws --profile $PROFILE --output text ec2 run-instances --image-id $AMIID --security-group-ids $SGID --count 1 --instance-type $INSTYPE --key-name $STACKID-key --query 'Instances[0].InstanceId'`
if [ "$INSTID" = "" ]; then
    echo "Instance building failed. Please purge the incomplete building first before redo building."
	echo "Abort."
	echo
    exit 252
fi
echo $INSTID
echo "Done."
echo

echo "Waiting for the instance up of $STACKID..."
while true; do
	sleep 10
	IPPUB=`aws --profile $PROFILE ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
	if [ "$IPPUB" != "" ]; then
		break;
	fi
done
echo "Done."
echo

echo "Taging instance of $STACKID..."
echo "aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags \"Key=Name,Value=$STACKID\""
aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags "Key=Name,Value=$STACKID"
echo "Done."
echo

echo "Querying instance IP address..."
IPPUB=`aws --profile $PROFILE --output text ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
echo $IPPUB
echo "Done."
echo

echo "Waiting for SSH up on $IPPUB ..."
sleep 60
while true; do
  nc -zv $IPPUB 22
  if [ "$?" -eq "0" ]; then
    break;
  fi
  sleep 5
done
echo "Done."
echo

echo "Instance provisioning..."
mkdir -p ~/.ssh
ssh-keyscan -H $IPPUB >> ~/.ssh/known_hosts
ssh -i $VLPKEY ubuntu@$IPPUB "echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections"
ssh -i $VLPKEY ubuntu@$IPPUB "sudo apt-get -y update; sudo apt-get install -y docker.io git"
ssh -i $VLPKEY ubuntu@$IPPUB "sudo sh -c \"echo '\n\nnet.core.default_qdisc=fq'>>/etc/sysctl.conf\""
ssh -i $VLPKEY ubuntu@$IPPUB "sudo sh -c \"echo '\nnet.ipv4.tcp_congestion_control=bbr'>>/etc/sysctl.conf\""
ssh -i $VLPKEY ubuntu@$IPPUB "sudo sysctl -p"
ssh -i $VLPKEY ubuntu@$IPPUB "sudo usermod -aG docker ubuntu"
echo "Done."
echo

SVC_DEPLOY () {
	echo "$1 provisioning..."
	echo "scp -i $VLPKEY -r $VLPHOME/$1 ubuntu@$IPPUB:"
	scp -i $VLPKEY -r $VLPHOME/$1 ubuntu@$IPPUB:
	echo "ssh -i $VLPKEY ubuntu@$IPPUB \"$1/$1.sh $SVROPT\""
	ssh -i $VLPKEY ubuntu@$IPPUB "$1/$1.sh $SVROPT"
	echo "Update Instance Tags..."
	while read p; do
		KEY=`echo "$p"|cut -d'=' -f1`
		VAL=`echo "$p"|cut -d'=' -f2`
		if [ "$KEY" = "" ]; then
			continue
		fi
		echo "aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags \"Key=$1.$KEY,Value=$VAL\""
		aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags "Key=$1.$KEY,Value=$VAL"
	done <$VLPHOME/$1/$1.env
	echo "Firewall rules $1..."
	FIREWALL_ENABLE "tcp" `grep "SGTCP" $VLPHOME/$1/$1.env|cut -d'=' -f2|sed 's/"//g'` "0.0.0.0/0"
	FIREWALL_ENABLE "udp" `grep "SGUDP" $VLPHOME/$1/$1.env|cut -d'=' -f2|sed 's/"//g'` "0.0.0.0/0"
	echo "Done."
	echo
}

if [ "$DEPLOY" = 0 ]; then
	SSLIBEV=true
fi

if [ "$BROOK" = true ]; then
	SVC_DEPLOY "server-brook"
fi

if [ "$L2TP" = true ]; then
	SVC_DEPLOY "server-softether"
fi

if [ "$SSLIBEV" = true ]; then
	SVC_DEPLOY "server-sslibev"
fi

if [ "$TROJAN" = true ]; then
	SVC_DEPLOY "server-trojan"
fi

if [ "$V2RAY" = true ]; then
	SVC_DEPLOY "server-v2ray"
fi

echo
exit 0
