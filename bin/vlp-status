#!/bin/bash

DIR=`dirname $0`
VLPHOME="$(cd $DIR; cd ..; pwd)"
. $VLPHOME/vlp.env
VLPCFG="$VLPHOME/.vpn-launchpad"
REGION=`aws --profile $PROFILE configure get region`
aws --profile $PROFILE --output table iam get-user >/dev/null
if [ "$?" != "0" ]; then
	echo "Please run 'vlp init' first."
	exit 255
fi

while [[ $# > 0 ]]; do
	option="$1"
	case $option in
		--all|--with-qrcode)
			shift
			QRCODE=1
			;;
		*)
			shift
			;;
	esac
done

echo "Querying Instance of $STACKID..."
aws --profile $PROFILE --output table ec2 describe-instances --filters "Name=key-name,Values=$STACKID-key" --query 'Reservations[*].Instances[*].{PublicIP:PublicIpAddress, LaunchTime:LaunchTime, InstanceType:InstanceType, InstanceId:InstanceId, AvailabilityZone:Placement.AvailabilityZone}'|tee /dev/null
RESULT=`aws --profile $PROFILE --output text ec2 describe-instances --filters "Name=key-name,Values=$STACKID-key" --query 'Reservations[*].Instances[*].{IP: PublicIpAddress, InstanceId: InstanceId}'|grep -v None|head -n1`
IPADDR=`echo "$RESULT"|awk '{print $1}'`
INSTID=`echo "$RESULT"|awk '{print $2}'`

if [ "$IPADDR" = "None" ] || [ "$IPADDR" = "" ]; then
	echo "VPN-SERVER: None"
	exit 1
else
	echo "VPN-SERVER: $IPADDR $INSTID"
fi
echo

echo "Querying Instance configuration..."
aws --profile $PROFILE --output table ec2 describe-tags --filters "Name=resource-id,Values=$INSTID" --query 'Tags[*].{ResourceId:ResourceId,Key:Key,Value:Value}'|tee /dev/null
echo

SVRENV=`aws --profile $PROFILE --output text ec2 describe-tags --filters "Name=resource-id,Values=$INSTID" --query 'Tags[*].{Key:Key, Value:Value}'`

BRKENV=`echo "$SVRENV"|grep server-brook.|sed 's/server-brook.//g'`
if [ "$BRKENV" != "" ]; then
	BRKPORT=`echo "$BRKENV"|grep BRKPORT|awk '{print $2}'`
	BRKPASS=`echo "$BRKENV"|grep BRKPASS|awk '{print $2}'`
	if [ "$BRKPORT" = "" ] || [ "$BRKPASS" = "" ]; then
		echo "Incorrect Brook configuration. Incomplete VPN server installation?"
		exit 2
	fi
	BRKINFO=`url -p "$IPADDR:$BRKPORT $BRKPASS"`
	echo "Brook-URL: brook://$BRKINFO"
	if [ "$QRCODE" = "1" ]; then
		qrcode-terminal "brook://$BRKINFO"
		echo "Scan QR code above from Brook compatible App to connect your mobile device."
	fi
	echo
fi

SSENV=`echo "$SVRENV"|grep server-sslibev.|sed 's/server-sslibev.//g'`
if [ "$SSENV" != "" ]; then
	SSMTHD=`echo "$SSENV"|grep SSMTHD|awk '{print $2}'`
	SSPASS=`echo "$SSENV"|grep SSPASS|awk '{print $2}'`
	SSPORT=`echo "$SSENV"|grep SSPORT|awk '{print $2}'`
	if [ "$SSMTHD" = "" ] || [ "$SSPASS" = "" ] || [ "$SSPORT" = "" ]; then
		echo "Incorrect Shadowsocks configuration. Incomplete VPN server installation?"
		exit 2
	fi
	SSUINFO=`echo "$SSMTHD:$SSPASS"|tr -d '\n'|base64|tr -d '\n'`
	echo "Shadowsocks-URL: ss://$SSUINFO@$IPADDR:$SSPORT#VLP-shadowsocks"
	if [ "$QRCODE" = "1" ]; then
		qrcode-terminal "ss://$SSUINFO@$IPADDR:$SSPORT#VLP-shadowsocks"
		echo "Scan QR code above from Shadowsocks compatible App to connect your mobile device."
	fi
	echo
fi

V2RAYENV=`echo "$SVRENV"|grep server-v2ray.|sed 's/server-v2ray.//g'`
if [ "$V2RAYENV" != "" ]; then
	V2RAYUUID=`echo "$V2RAYENV"|grep V2RAYUUID|awk '{print $2}'`
	V2RAYPORT=`echo "$V2RAYENV"|grep V2RAYPORT|awk '{print $2}'`
	V2RAYAID=`echo "$V2RAYENV"|grep V2RAYAID|awk '{print $2}'`
	if [ "$V2RAYUUID" = "" ] || [ "$V2RAYPORT" = "" ] || [ "$V2RAYAID" = "" ]; then
		echo "Incorrect V2RAY configuration. Incomplete VPN server installation?"
		exit 2
	fi
	V2RAYINFO=`echo "{'add':'$IPADDR','aid':'$V2RAYAID','id':'$V2RAYUUID','net':'tcp','port':'$V2RAYPORT','ps':'VLP-V2RAY'}"`
	V2RAYINFO=`echo $V2RAYINFO|base64|tr -d '\n'`
	echo "V2Ray-vmess-URI: vmess://$V2RAYINFO"
	if [ "$QRCODE" = "1" ]; then
		qrcode-terminal "vmess://$V2RAYINFO"
		echo "Scan QR code above from V2RayNG compatible App to connect your mobile device."
	fi
	echo
fi

TROJANENV=`echo "$SVRENV"|grep server-trojan.|sed 's/server-trojan.//g'`
if [ "$TROJANENV" != "" ]; then
	TROJAN_PASS=`echo "$TROJANENV"|grep TRJPASS|awk '{print $2}'`
	TROJAN_PORT=`echo "$TROJANENV"|grep TRJPORT|awk '{print $2}'`
	TROJAN_HOST=`echo "$TROJANENV"|grep DUCKDNSDOMAIN|awk '{print $2}'`
	if [ "$TROJAN_PASS" = "" ] || [ "$TROJAN_PORT" = "" ] || [ "$TROJAN_HOST" = "" ]; then
		echo "Incorrect TROJAN configuration. Incomplete VPN server installation?"
		exit 2
	fi
	TROJAN_HOST="$TROJAN_HOST.duckdns.org"
	TRJURL="trojan://$TROJAN_PASS@$TROJAN_HOST:$TROJAN_PORT"
	echo "Trojan-URL: $TRJURL"
	if [ "$QRCODE" = "1" ]; then
		qrcode-terminal "$TRJURL"
		echo "Scan QR code above from Trojan compatible mobile App to connect your mobile device."
	fi
	echo
fi

echo "Done."
exit 0
